<style lang="scss">
@import '../base/cssBase/index.scss';
  page {
    height: 100%;
  }

  .MyInviteQR {
    height: 100%;
    &-qrCtn {
      background-color: rgb(0, 153, 68);
      height: 100%;
    }

    &-canvas {
      width: 720px;
      height: 1280px;
    }

    &-img {
      width: 100%;
      height: 100%;
    }

    &-msg {
      padding-top: 30%;
      color: rgb(230, 230, 230);
      font-size: 30rpx;
      width: 100%;
      text-align: center;
    }

    &-bottom {
      position: fixed;
      background-color: rgba(101, 186, 103, 0.5);
      padding: 0 30px;
      padding-top: 60rpx;
      text-align: center;
      height: 260rpx;
      font-size: 30rpx;
      color: white;
      bottom: 15px;
      left: 15px;
      right: 15px;
      border-radius: 8rpx;
      box-sizing: border-box;
    }

    &-viewBtn {
      margin-top: 30rpx;
      background-color: #fff100;
      color: rgb(115, 109, 8);
      font-size: 36rpx;
    }

    &-retryBtn {
      margin-top: 30rpx;
      background-color: #fff100;
      color: rgb(115, 109, 8);
      font-size: 36rpx;
      width: 570rpx;
    }
  }
</style>
<template>
  <loginDialog :success="afterLogin" />
  <view class="MyInviteQR">
    <view class="MyInviteQR-qrCtn">
      <!-- <canvas
        class="MyInviteQR-canvas"
        canvas-id="myCanvas"
      /> -->

      <canvas
        class="MyInviteQR-canvas"
        hidden
        canvas-id="myCanvas"
      />
      <image
        wx:if="{{imgPath}}"
        class="MyInviteQR-img"
        src="{{imgPath}}"
        @longpress="handeLongPressImg"
      />

      <view
        wx:if="{{msg}}"
        class="MyInviteQR-msg"
      >
        {{msg}}
      </view>

      <button
        wx:if="{{imageCreate === 'fail'}}"
        class="MyInviteQR-retryBtn"
        @tap="handleRetry"
      >
        点击重试
      </button>

      <view class="MyInviteQR-bottom">
        长按保存图片到相册
        <button
          class="MyInviteQR-viewBtn"
          disabled="{{imageCreate !== 'success'}}"
          @tap="handeTapImg"
        >
          预览分享图
        </button>
      </view>
      
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import req from '@/network'
  import XYError from '@/utils/error'
  import * as constants from '@/network/constants'
  import {
    fetchInviteQrSuc,
    fetchInviteQrErr
  } from '@/store/actions'
  import LoginDialog from '@/components/loginDialog'
  import Session from '@/network/session'
  import { fromwhere, staticUrl } from '@/config'

  @connect({
    userInfo (state) {
      return state.user.info
    },
    qrUrl (state) {
      return state.invitations.qrUrl
    },
    qrErr (state) {
      return state.invitations.qrErr
    }
  }, {
    fetchInviteQrSuc,
    fetchInviteQrErr
  })

  export default class MyInviteQR extends wepy.page {
    config = {
      navigationBarTitleText: '我的收徒二维码'
    }

    components = {
      loginDialog: LoginDialog
    }

    data = {
      msg: '小程序码载入中...',
      imageCreate: 'init',
      imgPath: ''
    }

    computed = {
    }

    methods = {
      handeTapImg() {
        if (this.imgPath) {
          wepy.previewImage({urls: [this.imgPath]})
        }
      },
      handeLongPressImg() {
        if (this.imgPath) {
          this.saveImage().catch(() => {
            wepy.getSetting().then(res => {
              if (!res.authSetting['scope.writePhotosAlbum']) {
                wepy.openSetting().then(res => {
                  if (res.authSetting['scope.writePhotosAlbum']) {
                    this.saveImage()
                  }
                })
              }
            })
          })
        }
      },
      handleRetry() {
        this.getData()
      }
    }

    events = {
    }

    saveImage() {
      return wepy.saveImageToPhotosAlbum({
        filePath: this.imgPath
      }).then(() => {
        wepy.showToast({ title: '图片已保存到相册', icon: 'none' })
      })
    }

    downloadFilePromise(url, type, haveBackUp=false) {
      if (!url) {
        return new Promise((resolve, reject) => {
          resolve('')
        })
      }
      return wepy.downloadFile({
        url,
      }).then(res => {
        if (res.statusCode === 200) {
          console.log('### downloadFile success ###', type)
          return res.tempFilePath
        } else {
          console.log('### downloadFile fail ###', type, res.errMsg)
          throw new XYError(constants.QR_CREATE_FAIL, '图片下载失败')
        }
      }).catch(err => {
        console.log('### downloadFile fail ###', type, err.errMsg)
        if (!haveBackUp) { 
          this.msg = '图片下载失败'
          this.imageCreate = 'fail'
          this.$apply()
          throw new XYError(constants.QR_CREATE_FAIL, '图片下载失败')
        }
      })
    }

    createImage() {
      const self = this
      if (self.qrUrl) {
        Promise.all([
          self.downloadFilePromise(`${staticUrl}/img/stqrcode.png`, 'bg'),
          self.downloadFilePromise(self.qrUrl, 'qr'),
          self.downloadFilePromise(self.userInfo.avatarUrl, 'avatar', true).then(path => {
            if (!path) {
              return ''
            }
            return wepy.getImageInfo({src: path}).then(res => {
              return path
            }).catch(err => {
              return ''
            })
          })
        ]).then(pathArr => {
          const ctx = wepy.createCanvasContext('myCanvas')
          // 检测B类二维码是否生成成功
          return wepy.getImageInfo({src: pathArr[1]}).then(() => {
            ctx.drawImage(pathArr[0], 0, 0, 720, 1280)
            ctx.drawImage(pathArr[1], 231, 723, 252, 252)
            pathArr[2] && ctx.drawImage(pathArr[2], 60, 998, 120, 120)
            ctx.draw(false, () => {
              wepy.canvasToTempFilePath({
                canvasId: 'myCanvas'
              }, self).then(res => {
                self.imgPath = res.tempFilePath
                self.msg = ''
                self.imageCreate = 'success'
                self.$apply()
                console.log('### canvasToTempFilePath success ###')
              }).catch(() => {
                self.imageCreate = 'fail'
                self.msg = '小程序码保存失败'
                self.$apply()
                console.log('### canvasToTempFilePath fail ###')
              })
            })
          }).catch(() => {
            throw new XYError(constants.QR_CREATE_FAIL, '未获取到用户专属小程序码')
          })
        }).catch(err => {
          self.msg = err.msg || '小程序码生成失败'
          self.imageCreate = 'fail'
          self.$apply()
        })
      }
    }

    afterLogin = () => {
      this.getData()
    }

    onShow() {
    }

    getData() {
      this.msg = '小程序码载入中...'
      req.get('/api/Enlightcode/downQr', { fromwhere }).then(res => {
        this.methods.fetchInviteQrSuc(res.data)
      }).catch(err => {
        this.msg = '小程序码获取失败'
        this.imageCreate = 'fail'
        this.$apply()
        this.methods.fetchInviteQrErr(err)
      }).then(() => {
        this.createImage()
      })
    }

    onLoad() {
      const session = Session.get()
      if (session && session.sessionId) {
        this.getData()
      } else {
        this.msg = '请先登录'
      }
    }
  }
</script>
